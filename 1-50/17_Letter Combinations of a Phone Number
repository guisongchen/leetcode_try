/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.
*/

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        // define return value
        vector<string> ret;
        // null case
        if (digits.empty())
            return ret;
        
        // define hash
        unordered_map<char, string> mp{ {'2',"abc"},
                                        {'3',"def"},
                                        {'4',"ghi"},
                                        {'5',"jkl"},
                                        {'6',"mno"},
                                        {'7',"pqrs"},
                                        {'8',"tuv"},
                                        {'9',"wxyz"}};
        string curStr;
        dfs(mp, digits, mp[digits[0]], ret, curStr);
        return ret;
    }
    
private:
    void dfs(unordered_map<char, string>& mp,
             string& digits, string& nextStr, vector<string>& ret, string& curStr) {
        if (curStr.size() == digits.size()) {
            ret.push_back(curStr);
            return;
        }
        

        for (char cur : nextStr) {
            curStr.push_back(cur);
            dfs(mp, digits, mp[ digits[curStr.size()] ], ret, curStr);
            
            // the key to reuse curStr
            // IF NOT, we will get only one answer and return;
            curStr.pop_back();
        }
    }
};
